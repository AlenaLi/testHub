// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iproto/userdev/UserDevCenterAirRes.proto

package google.iproto.userdev;

public final class UserDevCenterAirResProto {
  private UserDevCenterAirResProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface UserDevCenterAirResOrBuilder extends
      // @@protoc_insertion_point(interface_extends:google.iproto.UserDevCenterAirRes)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *中央空调设备ID
     * </pre>
     *
     * <code>int32 dev_id = 1;</code>
     */
    int getDevId();

    /**
     * <pre>
     *中央空调设备类型定义
     * </pre>
     *
     * <code>.google.iproto.device_type dev_type = 2;</code>
     */
    int getDevTypeValue();
    /**
     * <pre>
     *中央空调设备类型定义
     * </pre>
     *
     * <code>.google.iproto.device_type dev_type = 2;</code>
     */
    google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type getDevType();

    /**
     * <pre>
     *开关状态  0:关, 1: 开
     * </pre>
     *
     * <code>int32 on_off = 3;</code>
     */
    int getOnOff();

    /**
     * <pre>
     *模式 1:制热， 2：制冷， 4：送风， 8：除湿
     * </pre>
     *
     * <code>int32 model = 4;</code>
     */
    int getModel();

    /**
     * <pre>
     *设定温度
     * </pre>
     *
     * <code>int32 set_temperature = 5;</code>
     */
    int getSetTemperature();

    /**
     * <pre>
     *风速： 0：自动， 1：低速，2：中速，3：高速
     * </pre>
     *
     * <code>int32 wind_speed = 6;</code>
     */
    int getWindSpeed();

    /**
     * <pre>
     *室内温度，有符号数
     * </pre>
     *
     * <code>int32 indoor_temperature = 7;</code>
     */
    int getIndoorTemperature();

    /**
     * <pre>
     *故障码
     * </pre>
     *
     * <code>int32 fault_code = 8;</code>
     */
    int getFaultCode();
  }
  /**
   * <pre>
   *中央空调详细信息响应
   * </pre>
   *
   * Protobuf type {@code google.iproto.UserDevCenterAirRes}
   */
  public  static final class UserDevCenterAirRes extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:google.iproto.UserDevCenterAirRes)
      UserDevCenterAirResOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserDevCenterAirRes.newBuilder() to construct.
    private UserDevCenterAirRes(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserDevCenterAirRes() {
      devId_ = 0;
      devType_ = 0;
      onOff_ = 0;
      model_ = 0;
      setTemperature_ = 0;
      windSpeed_ = 0;
      indoorTemperature_ = 0;
      faultCode_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserDevCenterAirRes(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              devId_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              devType_ = rawValue;
              break;
            }
            case 24: {

              onOff_ = input.readInt32();
              break;
            }
            case 32: {

              model_ = input.readInt32();
              break;
            }
            case 40: {

              setTemperature_ = input.readInt32();
              break;
            }
            case 48: {

              windSpeed_ = input.readInt32();
              break;
            }
            case 56: {

              indoorTemperature_ = input.readInt32();
              break;
            }
            case 64: {

              faultCode_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return google.iproto.userdev.UserDevCenterAirResProto.internal_static_google_iproto_UserDevCenterAirRes_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return google.iproto.userdev.UserDevCenterAirResProto.internal_static_google_iproto_UserDevCenterAirRes_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes.class, google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes.Builder.class);
    }

    public static final int DEV_ID_FIELD_NUMBER = 1;
    private int devId_;
    /**
     * <pre>
     *中央空调设备ID
     * </pre>
     *
     * <code>int32 dev_id = 1;</code>
     */
    public int getDevId() {
      return devId_;
    }

    public static final int DEV_TYPE_FIELD_NUMBER = 2;
    private int devType_;
    /**
     * <pre>
     *中央空调设备类型定义
     * </pre>
     *
     * <code>.google.iproto.device_type dev_type = 2;</code>
     */
    public int getDevTypeValue() {
      return devType_;
    }
    /**
     * <pre>
     *中央空调设备类型定义
     * </pre>
     *
     * <code>.google.iproto.device_type dev_type = 2;</code>
     */
    public google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type getDevType() {
      google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type result = google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type.valueOf(devType_);
      return result == null ? google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type.UNRECOGNIZED : result;
    }

    public static final int ON_OFF_FIELD_NUMBER = 3;
    private int onOff_;
    /**
     * <pre>
     *开关状态  0:关, 1: 开
     * </pre>
     *
     * <code>int32 on_off = 3;</code>
     */
    public int getOnOff() {
      return onOff_;
    }

    public static final int MODEL_FIELD_NUMBER = 4;
    private int model_;
    /**
     * <pre>
     *模式 1:制热， 2：制冷， 4：送风， 8：除湿
     * </pre>
     *
     * <code>int32 model = 4;</code>
     */
    public int getModel() {
      return model_;
    }

    public static final int SET_TEMPERATURE_FIELD_NUMBER = 5;
    private int setTemperature_;
    /**
     * <pre>
     *设定温度
     * </pre>
     *
     * <code>int32 set_temperature = 5;</code>
     */
    public int getSetTemperature() {
      return setTemperature_;
    }

    public static final int WIND_SPEED_FIELD_NUMBER = 6;
    private int windSpeed_;
    /**
     * <pre>
     *风速： 0：自动， 1：低速，2：中速，3：高速
     * </pre>
     *
     * <code>int32 wind_speed = 6;</code>
     */
    public int getWindSpeed() {
      return windSpeed_;
    }

    public static final int INDOOR_TEMPERATURE_FIELD_NUMBER = 7;
    private int indoorTemperature_;
    /**
     * <pre>
     *室内温度，有符号数
     * </pre>
     *
     * <code>int32 indoor_temperature = 7;</code>
     */
    public int getIndoorTemperature() {
      return indoorTemperature_;
    }

    public static final int FAULT_CODE_FIELD_NUMBER = 8;
    private int faultCode_;
    /**
     * <pre>
     *故障码
     * </pre>
     *
     * <code>int32 fault_code = 8;</code>
     */
    public int getFaultCode() {
      return faultCode_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (devId_ != 0) {
        output.writeInt32(1, devId_);
      }
      if (devType_ != google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type.devtype_release.getNumber()) {
        output.writeEnum(2, devType_);
      }
      if (onOff_ != 0) {
        output.writeInt32(3, onOff_);
      }
      if (model_ != 0) {
        output.writeInt32(4, model_);
      }
      if (setTemperature_ != 0) {
        output.writeInt32(5, setTemperature_);
      }
      if (windSpeed_ != 0) {
        output.writeInt32(6, windSpeed_);
      }
      if (indoorTemperature_ != 0) {
        output.writeInt32(7, indoorTemperature_);
      }
      if (faultCode_ != 0) {
        output.writeInt32(8, faultCode_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (devId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, devId_);
      }
      if (devType_ != google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type.devtype_release.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, devType_);
      }
      if (onOff_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, onOff_);
      }
      if (model_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, model_);
      }
      if (setTemperature_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, setTemperature_);
      }
      if (windSpeed_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, windSpeed_);
      }
      if (indoorTemperature_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, indoorTemperature_);
      }
      if (faultCode_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, faultCode_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes)) {
        return super.equals(obj);
      }
      google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes other = (google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes) obj;

      boolean result = true;
      result = result && (getDevId()
          == other.getDevId());
      result = result && devType_ == other.devType_;
      result = result && (getOnOff()
          == other.getOnOff());
      result = result && (getModel()
          == other.getModel());
      result = result && (getSetTemperature()
          == other.getSetTemperature());
      result = result && (getWindSpeed()
          == other.getWindSpeed());
      result = result && (getIndoorTemperature()
          == other.getIndoorTemperature());
      result = result && (getFaultCode()
          == other.getFaultCode());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DEV_ID_FIELD_NUMBER;
      hash = (53 * hash) + getDevId();
      hash = (37 * hash) + DEV_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + devType_;
      hash = (37 * hash) + ON_OFF_FIELD_NUMBER;
      hash = (53 * hash) + getOnOff();
      hash = (37 * hash) + MODEL_FIELD_NUMBER;
      hash = (53 * hash) + getModel();
      hash = (37 * hash) + SET_TEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + getSetTemperature();
      hash = (37 * hash) + WIND_SPEED_FIELD_NUMBER;
      hash = (53 * hash) + getWindSpeed();
      hash = (37 * hash) + INDOOR_TEMPERATURE_FIELD_NUMBER;
      hash = (53 * hash) + getIndoorTemperature();
      hash = (37 * hash) + FAULT_CODE_FIELD_NUMBER;
      hash = (53 * hash) + getFaultCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *中央空调详细信息响应
     * </pre>
     *
     * Protobuf type {@code google.iproto.UserDevCenterAirRes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:google.iproto.UserDevCenterAirRes)
        google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirResOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return google.iproto.userdev.UserDevCenterAirResProto.internal_static_google_iproto_UserDevCenterAirRes_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return google.iproto.userdev.UserDevCenterAirResProto.internal_static_google_iproto_UserDevCenterAirRes_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes.class, google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes.Builder.class);
      }

      // Construct using google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        devId_ = 0;

        devType_ = 0;

        onOff_ = 0;

        model_ = 0;

        setTemperature_ = 0;

        windSpeed_ = 0;

        indoorTemperature_ = 0;

        faultCode_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return google.iproto.userdev.UserDevCenterAirResProto.internal_static_google_iproto_UserDevCenterAirRes_descriptor;
      }

      public google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes getDefaultInstanceForType() {
        return google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes.getDefaultInstance();
      }

      public google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes build() {
        google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes buildPartial() {
        google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes result = new google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes(this);
        result.devId_ = devId_;
        result.devType_ = devType_;
        result.onOff_ = onOff_;
        result.model_ = model_;
        result.setTemperature_ = setTemperature_;
        result.windSpeed_ = windSpeed_;
        result.indoorTemperature_ = indoorTemperature_;
        result.faultCode_ = faultCode_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes) {
          return mergeFrom((google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes other) {
        if (other == google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes.getDefaultInstance()) return this;
        if (other.getDevId() != 0) {
          setDevId(other.getDevId());
        }
        if (other.devType_ != 0) {
          setDevTypeValue(other.getDevTypeValue());
        }
        if (other.getOnOff() != 0) {
          setOnOff(other.getOnOff());
        }
        if (other.getModel() != 0) {
          setModel(other.getModel());
        }
        if (other.getSetTemperature() != 0) {
          setSetTemperature(other.getSetTemperature());
        }
        if (other.getWindSpeed() != 0) {
          setWindSpeed(other.getWindSpeed());
        }
        if (other.getIndoorTemperature() != 0) {
          setIndoorTemperature(other.getIndoorTemperature());
        }
        if (other.getFaultCode() != 0) {
          setFaultCode(other.getFaultCode());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int devId_ ;
      /**
       * <pre>
       *中央空调设备ID
       * </pre>
       *
       * <code>int32 dev_id = 1;</code>
       */
      public int getDevId() {
        return devId_;
      }
      /**
       * <pre>
       *中央空调设备ID
       * </pre>
       *
       * <code>int32 dev_id = 1;</code>
       */
      public Builder setDevId(int value) {
        
        devId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *中央空调设备ID
       * </pre>
       *
       * <code>int32 dev_id = 1;</code>
       */
      public Builder clearDevId() {
        
        devId_ = 0;
        onChanged();
        return this;
      }

      private int devType_ = 0;
      /**
       * <pre>
       *中央空调设备类型定义
       * </pre>
       *
       * <code>.google.iproto.device_type dev_type = 2;</code>
       */
      public int getDevTypeValue() {
        return devType_;
      }
      /**
       * <pre>
       *中央空调设备类型定义
       * </pre>
       *
       * <code>.google.iproto.device_type dev_type = 2;</code>
       */
      public Builder setDevTypeValue(int value) {
        devType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *中央空调设备类型定义
       * </pre>
       *
       * <code>.google.iproto.device_type dev_type = 2;</code>
       */
      public google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type getDevType() {
        google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type result = google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type.valueOf(devType_);
        return result == null ? google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *中央空调设备类型定义
       * </pre>
       *
       * <code>.google.iproto.device_type dev_type = 2;</code>
       */
      public Builder setDevType(google.iproto.mqtt.ComDevDefDeviceTypeProto.device_type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        devType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *中央空调设备类型定义
       * </pre>
       *
       * <code>.google.iproto.device_type dev_type = 2;</code>
       */
      public Builder clearDevType() {
        
        devType_ = 0;
        onChanged();
        return this;
      }

      private int onOff_ ;
      /**
       * <pre>
       *开关状态  0:关, 1: 开
       * </pre>
       *
       * <code>int32 on_off = 3;</code>
       */
      public int getOnOff() {
        return onOff_;
      }
      /**
       * <pre>
       *开关状态  0:关, 1: 开
       * </pre>
       *
       * <code>int32 on_off = 3;</code>
       */
      public Builder setOnOff(int value) {
        
        onOff_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *开关状态  0:关, 1: 开
       * </pre>
       *
       * <code>int32 on_off = 3;</code>
       */
      public Builder clearOnOff() {
        
        onOff_ = 0;
        onChanged();
        return this;
      }

      private int model_ ;
      /**
       * <pre>
       *模式 1:制热， 2：制冷， 4：送风， 8：除湿
       * </pre>
       *
       * <code>int32 model = 4;</code>
       */
      public int getModel() {
        return model_;
      }
      /**
       * <pre>
       *模式 1:制热， 2：制冷， 4：送风， 8：除湿
       * </pre>
       *
       * <code>int32 model = 4;</code>
       */
      public Builder setModel(int value) {
        
        model_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *模式 1:制热， 2：制冷， 4：送风， 8：除湿
       * </pre>
       *
       * <code>int32 model = 4;</code>
       */
      public Builder clearModel() {
        
        model_ = 0;
        onChanged();
        return this;
      }

      private int setTemperature_ ;
      /**
       * <pre>
       *设定温度
       * </pre>
       *
       * <code>int32 set_temperature = 5;</code>
       */
      public int getSetTemperature() {
        return setTemperature_;
      }
      /**
       * <pre>
       *设定温度
       * </pre>
       *
       * <code>int32 set_temperature = 5;</code>
       */
      public Builder setSetTemperature(int value) {
        
        setTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *设定温度
       * </pre>
       *
       * <code>int32 set_temperature = 5;</code>
       */
      public Builder clearSetTemperature() {
        
        setTemperature_ = 0;
        onChanged();
        return this;
      }

      private int windSpeed_ ;
      /**
       * <pre>
       *风速： 0：自动， 1：低速，2：中速，3：高速
       * </pre>
       *
       * <code>int32 wind_speed = 6;</code>
       */
      public int getWindSpeed() {
        return windSpeed_;
      }
      /**
       * <pre>
       *风速： 0：自动， 1：低速，2：中速，3：高速
       * </pre>
       *
       * <code>int32 wind_speed = 6;</code>
       */
      public Builder setWindSpeed(int value) {
        
        windSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *风速： 0：自动， 1：低速，2：中速，3：高速
       * </pre>
       *
       * <code>int32 wind_speed = 6;</code>
       */
      public Builder clearWindSpeed() {
        
        windSpeed_ = 0;
        onChanged();
        return this;
      }

      private int indoorTemperature_ ;
      /**
       * <pre>
       *室内温度，有符号数
       * </pre>
       *
       * <code>int32 indoor_temperature = 7;</code>
       */
      public int getIndoorTemperature() {
        return indoorTemperature_;
      }
      /**
       * <pre>
       *室内温度，有符号数
       * </pre>
       *
       * <code>int32 indoor_temperature = 7;</code>
       */
      public Builder setIndoorTemperature(int value) {
        
        indoorTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *室内温度，有符号数
       * </pre>
       *
       * <code>int32 indoor_temperature = 7;</code>
       */
      public Builder clearIndoorTemperature() {
        
        indoorTemperature_ = 0;
        onChanged();
        return this;
      }

      private int faultCode_ ;
      /**
       * <pre>
       *故障码
       * </pre>
       *
       * <code>int32 fault_code = 8;</code>
       */
      public int getFaultCode() {
        return faultCode_;
      }
      /**
       * <pre>
       *故障码
       * </pre>
       *
       * <code>int32 fault_code = 8;</code>
       */
      public Builder setFaultCode(int value) {
        
        faultCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *故障码
       * </pre>
       *
       * <code>int32 fault_code = 8;</code>
       */
      public Builder clearFaultCode() {
        
        faultCode_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:google.iproto.UserDevCenterAirRes)
    }

    // @@protoc_insertion_point(class_scope:google.iproto.UserDevCenterAirRes)
    private static final google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes();
    }

    public static google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserDevCenterAirRes>
        PARSER = new com.google.protobuf.AbstractParser<UserDevCenterAirRes>() {
      public UserDevCenterAirRes parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserDevCenterAirRes(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserDevCenterAirRes> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserDevCenterAirRes> getParserForType() {
      return PARSER;
    }

    public google.iproto.userdev.UserDevCenterAirResProto.UserDevCenterAirRes getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_google_iproto_UserDevCenterAirRes_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_google_iproto_UserDevCenterAirRes_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n/google/iproto/userdev/UserDevCenterAir" +
      "Res.proto\022\rgoogle.iproto\0323google/iproto/" +
      "mqtt/p0101_ComDevDef_devicetype.proto\"\317\001" +
      "\n\023UserDevCenterAirRes\022\016\n\006dev_id\030\001 \001(\005\022,\n" +
      "\010dev_type\030\002 \001(\0162\032.google.iproto.device_t" +
      "ype\022\016\n\006on_off\030\003 \001(\005\022\r\n\005model\030\004 \001(\005\022\027\n\017se" +
      "t_temperature\030\005 \001(\005\022\022\n\nwind_speed\030\006 \001(\005\022" +
      "\032\n\022indoor_temperature\030\007 \001(\005\022\022\n\nfault_cod" +
      "e\030\010 \001(\005B1\n\025google.iproto.userdevB\030UserDe" +
      "vCenterAirResProtob\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          google.iproto.mqtt.ComDevDefDeviceTypeProto.getDescriptor(),
        }, assigner);
    internal_static_google_iproto_UserDevCenterAirRes_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_google_iproto_UserDevCenterAirRes_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_google_iproto_UserDevCenterAirRes_descriptor,
        new java.lang.String[] { "DevId", "DevType", "OnOff", "Model", "SetTemperature", "WindSpeed", "IndoorTemperature", "FaultCode", });
    google.iproto.mqtt.ComDevDefDeviceTypeProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
